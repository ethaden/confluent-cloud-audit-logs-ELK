---
services:
  setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       echo "Waiting for Elasticsearch availability";
       until curl -s http://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '

  es01:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   hostname: es01
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - esdata01:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT}:9200
   environment:
     - node.name=es01
     - cluster.name=${CLUSTER_NAME}
     - discovery.type=single-node
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=false
     - xpack.security.transport.ssl.enabled=false
     - xpack.license.self_generated.type=${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt http://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    hostname: kibana
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - kibanadata:/usr/share/kibana/data
      - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - SERVER_SSL_ENABLED=false
      # - CONFLUENT_CLOUD_AUDIT_LOG_HOSTS=${CONFLUENT_CLOUD_AUDIT_LOG_HOSTS}
      # - CONFLUENT_CLOUD_AUDIT_LOG_API_KEY=${CONFLUENT_CLOUD_AUDIT_LOG_API_KEY}
      # - CONFLUENT_CLOUD_AUDIT_LOG_API_SECRET=${CONFLUENT_CLOUD_AUDIT_LOG_API_SECRET}
      # - CONFLUENT_CLOUD_AUDIT_LOG_GROUP_ID=${CONFLUENT_CLOUD_AUDIT_LOG_GROUP_ID}
      # - CONFLUENT_CLOUD_AUDIT_LOG_CLIENT_ID=${CONFLUENT_CLOUD_AUDIT_LOG_CLIENT_ID}
      # - CONFLUENT_CLOUD_AUDIT_LOG_TOPIC=${CONFLUENT_CLOUD_AUDIT_LOG_TOPIC}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
           "CMD-SHELL",
          "curl -s -I --cacert config/certs/ca/ca.crt http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Docker container for running the configured fleet agent. The agent will capture docker logs
  fleet-server:
    depends_on:
      kibana:
        condition: service_healthy
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    volumes:
      - "fleetserverdata:/usr/share/elastic-agent"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    ports:
      - ${FLEET_PORT}:8220
    user: root
    environment:
      - FLEET_ENROLL=1
      - FLEET_INSECURE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=http://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_URL=http://fleet-server:8220
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOST=http://kibana:5601
      - CONFLUENT_CLOUD_AUDIT_LOG_HOSTS=${CONFLUENT_CLOUD_AUDIT_LOG_HOSTS}
      - CONFLUENT_CLOUD_AUDIT_LOG_API_KEY=${CONFLUENT_CLOUD_AUDIT_LOG_API_KEY}
      - CONFLUENT_CLOUD_AUDIT_LOG_API_SECRET=${CONFLUENT_CLOUD_AUDIT_LOG_API_SECRET}
      - CONFLUENT_CLOUD_AUDIT_LOG_GROUP_ID=${CONFLUENT_CLOUD_AUDIT_LOG_GROUP_ID}
      - CONFLUENT_CLOUD_AUDIT_LOG_CLIENT_ID=${CONFLUENT_CLOUD_AUDIT_LOG_CLIENT_ID}
      - CONFLUENT_CLOUD_AUDIT_LOG_TOPIC=${CONFLUENT_CLOUD_AUDIT_LOG_TOPIC}

volumes:
  esdata01:
    driver: local
  kibanadata:
    driver: local
  fleetserverdata:
    driver: local
